{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/akshar/react_prjkt/ch23/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetails from \"../components/meetups/MeetupDetails\";\n\nfunction Meetup() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    img: \"https://www.spc.noaa.gov/faq/tornado/alfalfa.jpg\",\n    title: \"first\",\n    description: \"abc\",\n    address: \"123\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://Akshar21:akshar@2021@cluster0.begp6.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; //fetch data for a single meetup\n\n  const client = await MongoClient.connect('mongodb+srv://Akshar21:akshar@2021@cluster0.begp6.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default Meetup;","map":{"version":3,"sources":["/home/akshar/react_prjkt/ch23/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js"],"names":["MongoClient","MeetupDetails","Meetup","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","props","meetupData"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;;AAEA,SAASC,MAAT,GAAkB;AAEhB,sBACE,QAAC,aAAD;AACE,IAAA,GAAG,EAAC,kDADN;AAEE,IAAA,KAAK,EAAC,OAFR;AAGE,IAAA,WAAW,EAAC,KAHd;AAIE,IAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AACD,OAAO,eAAeC,cAAf,GAA+B;AACpC,QAAMC,MAAM,GAAC,MAAMJ,WAAW,CAACK,OAAZ,CAAoB,mGAApB,CAAnB;AACA,QAAMC,EAAE,GAACF,MAAM,CAACE,EAAP,EAAT;AAEA,QAAMC,iBAAiB,GAACD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAxB;AACA,QAAMC,OAAO,GAAC,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,EAAmCC,OAAnC,EAApB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAC,KADJ;AAELC,IAAAA,KAAK,EAACN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAG;AAACC,MAAAA,MAAM,EAAC;AAACC,QAAAA,QAAQ,EAACF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAV;AAAR,KAAH,CAAlB;AAFD,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAC3C,QAAMH,QAAQ,GAACG,OAAO,CAACJ,MAAR,CAAeC,QAA9B,CAD2C,CAG7C;;AACA,QAAMf,MAAM,GAAC,MAAMJ,WAAW,CAACK,OAAZ,CAAoB,mGAApB,CAAnB;AACE,QAAMC,EAAE,GAACF,MAAM,CAACE,EAAP,EAAT;AAEA,QAAMC,iBAAiB,GAACD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAxB;AACA,QAAMe,cAAc,GAAC,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAACQ;AAAL,GAA1B,CAA3B;AACAf,EAAAA,MAAM,CAACS,KAAP;AACA,SAAM;AACJY,IAAAA,KAAK,EAAC;AACJC,MAAAA,UAAU,EAACH;AADP;AADF,GAAN;AAKD;AAED,eAAerB,MAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport MeetupDetails from \"../components/meetups/MeetupDetails\";\n\nfunction Meetup() {\n  \n  return (\n    <MeetupDetails\n      img=\"https://www.spc.noaa.gov/faq/tornado/alfalfa.jpg\"\n      title=\"first\"\n      description=\"abc\"\n      address=\"123\"\n    />\n  );\n}\nexport async function getStaticPaths(){\n  const client=await MongoClient.connect('mongodb+srv://Akshar21:akshar@2021@cluster0.begp6.mongodb.net/meetups?retryWrites=true&w=majority')\n  const db=client.db();\n    \n  const meetupsCollection=db.collection('meetups');\n  const meetups=await meetupsCollection.find({},{_id:1}).toArray();\n  client.close();\n  return {\n    fallback:false,\n    paths:meetups.map(meetup=>({params:{meetupId:meetup._id.toString()},\n  })),\n\n  };\n}\n\nexport async function getStaticProps(context){\n  const meetupId=context.params.meetupId;\n  \n//fetch data for a single meetup\nconst client=await MongoClient.connect('mongodb+srv://Akshar21:akshar@2021@cluster0.begp6.mongodb.net/meetups?retryWrites=true&w=majority')\n  const db=client.db();\n    \n  const meetupsCollection=db.collection('meetups');\n  const selectedMeetup=await meetupsCollection.findOne({_id:meetupId});\n  client.close();\n  return{\n    props:{\n      meetupData:selectedMeetup\n    }\n  }\n}\n\nexport default Meetup;\n"]},"metadata":{},"sourceType":"module"}